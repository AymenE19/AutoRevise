### Module 1: Introduction à Python

#### 1.1 Qu'est-ce que Python ?
Python est un langage de programmation interprété, de haut niveau et généraliste. Il est réputé pour sa syntaxe claire et lisible, ce qui en fait un excellent choix pour les débutants. Python est utilisé dans de nombreux domaines tels que le développement web, l'analyse de données, l'intelligence artificielle, le machine learning, etc.

**Caractéristiques principales :**
- **Facile à apprendre et à lire :** Syntaxe proche du langage naturel.
- **Interprété :** Le code est exécuté ligne par ligne, facilitant le débogage.
- **Multiplateforme :** Fonctionne sur Windows, macOS, Linux.
- **Vaste bibliothèque standard :** Offre de nombreux modules et fonctions prêts à l'emploi.
- **Communauté active :** Grande communauté de développeurs et nombreuses ressources disponibles.

#### 1.2 Installation de l'environnement
Pour commencer à programmer en Python, vous avez besoin d'un interpréteur Python et d'un environnement de développement.

##### 1.2.1 Anaconda
Anaconda est une distribution Python populaire, particulièrement pour la science des données. Elle inclut Python, de nombreux packages scientifiques (comme NumPy, Pandas, Matplotlib) et des outils comme Jupyter Notebook et Spyder.
- **Téléchargement :** [https://www.anaconda.com/products/distribution](https://www.anaconda.com/products/distribution)
- **Installation :** Suivez les instructions pour votre système d'exploitation.

##### 1.2.2 VS Code (Visual Studio Code)
VS Code est un éditeur de code source léger mais puissant, développé par Microsoft. Il prend en charge Python via des extensions.
- **Téléchargement :** [https://code.visualstudio.com/](https://code.visualstudio.com/)
- **Installation :** Installez VS Code, puis installez l'extension Python de Microsoft depuis le marketplace des extensions.

##### 1.2.3 Jupyter Notebook
Jupyter Notebook est une application web open-source qui vous permet de créer et de partager des documents contenant du code live, des équations, des visualisations et du texte narratif. Il est inclus dans Anaconda.
- **Lancement (avec Anaconda) :** Ouvrez Anaconda Navigator et lancez Jupyter Notebook, ou tapez `jupyter notebook` dans le terminal Anaconda Prompt.

#### 1.3 Variables et Types de Données
Les variables sont des conteneurs pour stocker des valeurs de données. Python est un langage à typage dynamique, ce qui signifie que vous n'avez pas besoin de déclarer explicitement le type d'une variable.

##### 1.3.1 Variables
Une variable est créée au moment où vous lui affectez une valeur pour la première fois.
```python
x = 5           # x est de type int
nom = "Alice"   # nom est de type str
pi = 3.14       # pi est de type float
est_majeur = True # est_majeur est de type bool
```

##### 1.3.2 Types de Données Numériques
- **Entiers (`int`) :** Nombres entiers, positifs ou négatifs, sans décimales.
  ```python
  age = 30
  quantite = -5
  ```
- **Flottants (`float`) :** Nombres avec une partie décimale.
  ```python
  prix = 19.99
  temperature = -3.5
  ```

##### 1.3.3 Chaînes de Caractères (`str`)
Séquences de caractères, entourées de guillemets simples (`'`) ou doubles (`"`).
```python
message = "Bonjour le monde !"
ville = 'Paris'
```

##### 1.3.4 Booléens (`bool`)
Représentent deux valeurs : `True` (vrai) ou `False` (faux). Souvent utilisés dans les expressions conditionnelles.
```python
is_active = True
has_permission = False
```

#### 1.4 Opérateurs

##### 1.4.1 Opérateurs Arithmétiques
Utilisés pour effectuer des opérations mathématiques.
- `+` : Addition (`a + b`)
- `-` : Soustraction (`a - b`)
- `*` : Multiplication (`a * b`)
- `/` : Division (`a / b`) -> retourne un flottant
- `//` : Division entière (`a // b`) -> retourne un entier (partie entière)
- `%` : Modulo (`a % b`) -> reste de la division
- `**` : Exponentiation (`a ** b`) -> a puissance b
```python
a = 10
b = 3
print(a + b)  # 13
print(a / b)  # 3.333...
print(a // b) # 3
print(a % b)  # 1
print(a ** b) # 1000
```

##### 1.4.2 Opérateurs de Comparaison
Utilisés pour comparer deux valeurs. Retournent un booléen (`True` ou `False`).
- `==` : Égal à (`a == b`)
- `!=` : Différent de (`a != b`)
- `>` : Supérieur à (`a > b`)
- `<` : Inférieur à (`a < b`)
- `>=` : Supérieur ou égal à (`a >= b`)
- `<=` : Inférieur ou égal à (`a <= b`)
```python
x = 5
y = 10
print(x == y) # False
print(x < y)  # True
```

##### 1.4.3 Opérateurs Logiques
Utilisés pour combiner des expressions conditionnelles.
- `and` : ET logique (vrai si les deux opérandes sont vrais)
- `or` : OU logique (vrai si au moins un des opérandes est vrai)
- `not` : NON logique (inverse la valeur booléenne)
```python
age = 25
est_etudiant = True
if age > 18 and est_etudiant:
    print("Admis") # Admis

if not est_etudiant:
    print("N'est pas étudiant")
```

#### 1.5 Structures de Contrôle : Conditions
Permettent d'exécuter des blocs de code en fonction de certaines conditions.

##### 1.5.1 `if`
Exécute un bloc de code si la condition est vraie.
```python
temperature = 25
if temperature > 20:
    print("Il fait chaud.")
# Output: Il fait chaud.
```

##### 1.5.2 `else`
Exécute un bloc de code si la condition du `if` est fausse.
```python
temperature = 15
if temperature > 20:
    print("Il fait chaud.")
else:
    print("Il ne fait pas chaud.")
# Output: Il ne fait pas chaud.
```

##### 1.5.3 `elif` (else if)
Permet de vérifier plusieurs conditions.
```python
note = 75
if note >= 90:
    print("A")
elif note >= 80:
    print("B")
elif note >= 70:
    print("C")
else:
    print("D")
# Output: C
```

#### 1.6 Structures de Contrôle : Boucles
Permettent d'exécuter un bloc de code plusieurs fois.

##### 1.6.1 Boucle `for`
Utilisée pour itérer sur une séquence (liste, tuple, dictionnaire, chaîne de caractères) ou d'autres objets itérables.
```python
# Itérer sur une liste
fruits = ["pomme", "banane", "cerise"]
for fruit in fruits:
    print(fruit)
# Output:
# pomme
# banane
# cerise

# Itérer avec range()
for i in range(5):  # de 0 à 4
    print(i)
# Output:
# 0
# 1
# 2
# 3
# 4
```

##### 1.6.2 Boucle `while`
Exécute un bloc de code tant qu'une condition est vraie.
```python
compteur = 0
while compteur < 5:
    print(compteur)
    compteur += 1 # Important d'incrémenter pour éviter une boucle infinie
# Output:
# 0
# 1
# 2
# 3
# 4
```