## Module 1: Introduction à Python

### 1.1 Qu'est-ce que Python ?
Python est un langage de programmation interprété, de haut niveau et généraliste. Il est réputé pour sa syntaxe claire et lisible, ce qui en facilite l'apprentissage.
*   **Dynamiquement typé** : Pas besoin de déclarer le type d'une variable.
*   **Multi-paradigme** : Supporte la programmation procédurale, orientée objet et fonctionnelle.
*   **Vaste bibliothèque standard** : Offre de nombreux modules pour diverses tâches.

### 1.2 Installation de l'environnement
Pour commencer à programmer en Python, vous avez besoin d'un interpréteur Python et d'un environnement de développement.

#### 1.2.1 Anaconda
Anaconda est une distribution populaire de Python et R, axée sur la science des données. Elle inclut de nombreux paquets utiles.
1.  Téléchargez Anaconda depuis [anaconda.com](https://www.anaconda.com/products/distribution).
2.  Suivez les instructions d'installation pour votre système d'exploitation.
3.  Anaconda Navigator vous permet de gérer les environnements et les paquets.

#### 1.2.2 VS Code (Visual Studio Code)
VS Code est un éditeur de code source léger mais puissant, avec un excellent support pour Python.
1.  Téléchargez VS Code depuis [code.visualstudio.com](https://code.visualstudio.com/).
2.  Installez l'extension Python de Microsoft.

#### 1.2.3 Jupyter Notebook
Jupyter Notebook est une application web qui permet de créer et de partager des documents contenant du code live, des équations, des visualisations et du texte narratif.
*   Souvent inclus avec Anaconda.
*   Peut être lancé depuis le terminal avec `jupyter notebook`.

### 1.3 Votre premier programme Python
Créons un simple programme "Hello, World!".
```python
print("Hello, World!")
```
Enregistrez ce code dans un fichier nommé `hello.py` et exécutez-le depuis votre terminal avec `python hello.py`.

### 1.4 Variables et Types de Données

#### 1.4.1 Variables
Une variable est un nom qui fait référence à une valeur en mémoire. En Python, vous n'avez pas besoin de déclarer le type d'une variable.
```python
age = 30
nom = "Alice"
pi = 3.14159
est_majeur = True
```

#### 1.4.2 Types de données numériques (entiers, flottants)
*   **Entiers (`int`)** : Nombres entiers, positifs ou négatifs, sans décimales. Exemple : `10`, `-3`.
*   **Flottants (`float`)** : Nombres avec une partie décimale. Exemple : `3.14`, `-0.5`.
```python
nombre_entier = 100
nombre_flottant = 20.5
print(type(nombre_entier))  # Affiche <class 'int'>
print(type(nombre_flottant)) # Affiche <class 'float'>
```

#### 1.4.3 Chaînes de caractères (strings)
Les chaînes (`str`) sont des séquences de caractères, délimitées par des guillemets simples (`'`) ou doubles (`"`).
```python
message_simple = 'Bonjour'
message_double = "Python c'est cool !"
phrase = """Ceci est une chaîne
sur plusieurs lignes."""
print(message_simple)
print(phrase)
```

#### 1.4.4 Booléens
Les booléens (`bool`) représentent l'une des deux valeurs : `True` ou `False`.
```python
condition_vraie = True
condition_fausse = False
print(type(condition_vraie)) # Affiche <class 'bool'>
```

### 1.5 Opérateurs

#### 1.5.1 Opérateurs arithmétiques
Utilisés pour effectuer des opérations mathématiques.
*   Addition : `+`
*   Soustraction : `-`
*   Multiplication : `*`
*   Division : `/` (donne un flottant)
*   Division entière : `//` (donne un entier, partie entière)
*   Modulo : `%` (reste de la division)
*   Exponentiation : `**`
```python
a = 10
b = 3
print(f"a + b = {a + b}")   # 13
print(f"a / b = {a / b}")   # 3.333...
print(f"a // b = {a // b}") # 3
print(f"a % b = {a % b}")   # 1
print(f"a ** b = {a ** b}") # 1000
```

#### 1.5.2 Opérateurs de comparaison
Utilisés pour comparer deux valeurs. Retournent un booléen.
*   Égal à : `==`
*   Différent de : `!=`
*   Supérieur à : `>`
*   Inférieur à : `<`
*   Supérieur ou égal à : `>=`
*   Inférieur ou égal à : `<=`
```python
x = 5
y = 10
print(f"x == y: {x == y}") # False
print(f"x != y: {x != y}") # True
print(f"x < y: {x < y}")   # True
```

#### 1.5.3 Opérateurs logiques
Utilisés pour combiner des expressions conditionnelles.
*   `and` : Vrai si les deux opérandes sont vrais.
*   `or` : Vrai si au moins un des opérandes est vrai.
*   `not` : Inverse l'état logique de son opérande.
```python
p = True
q = False
print(f"p and q: {p and q}") # False
print(f"p or q: {p or q}")   # True
print(f"not p: {not p}")     # False
```

### 1.6 Structures de Contrôle : Conditions

#### 1.6.1 L'instruction `if`
Exécute un bloc de code si une condition est vraie.
```python
temperature = 25
if temperature > 20:
    print("Il fait chaud !")
```

#### 1.6.2 L'instruction `else`
Exécute un bloc de code si la condition de l'`if` est fausse.
```python
temperature = 15
if temperature > 20:
    print("Il fait chaud !")
else:
    print("Il ne fait pas si chaud.")
```

#### 1.6.3 L'instruction `elif`
Permet de vérifier plusieurs conditions. `elif` est une contraction de "else if".
```python
note = 75
if note >= 90:
    print("Grade A")
elif note >= 80:
    print("Grade B")
elif note >= 70:
    print("Grade C")
else:
    print("Grade D ou F")
```

### 1.7 Structures de Contrôle : Boucles

#### 1.7.1 La boucle `for`
Utilisée pour itérer sur une séquence (comme une liste, un tuple, un dictionnaire, un ensemble ou une chaîne).
```python
# Itérer sur une liste
fruits = ["pomme", "banane", "cerise"]
for fruit in fruits:
    print(fruit)

# Itérer avec range()
for i in range(5):  # de 0 à 4
    print(i)
```

#### 1.7.2 La boucle `while`
Exécute un bloc de code tant qu'une condition est vraie.
```python
compteur = 0
while compteur < 5:
    print(f"Compteur : {compteur}")
    compteur += 1 # Important d'incrémenter pour éviter une boucle infinie
```

#### 1.7.3 `break` et `continue`
*   `break` : Termine la boucle courante prématurément.
*   `continue` : Passe à l'itération suivante de la boucle.
```python
# Exemple avec break
for i in range(10):
    if i == 5:
        break  # Sort de la boucle quand i est 5
    print(i) # Affiche 0, 1, 2, 3, 4

# Exemple avec continue
for i in range(5):
    if i == 2:
        continue # Saute l'itération quand i est 2
    print(i) # Affiche 0, 1, 3, 4
```